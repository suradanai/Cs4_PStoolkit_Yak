#!/usr/bin/env python3
"""
Advanced Firmware Safety Validator
‡πÄ‡∏Ñ‡∏£‡∏∑‡πà‡∏≠‡∏á‡∏°‡∏∑‡∏≠‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏Ñ‡∏ß‡∏≤‡∏°‡∏õ‡∏•‡∏≠‡∏î‡∏†‡∏±‡∏¢‡∏Ç‡∏±‡πâ‡∏ô‡∏™‡∏π‡∏á‡∏Å‡πà‡∏≠‡∏ô‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç firmware
"""

import os
import sys
sys.path.append(os.path.dirname(os.path.abspath(__file__)))

from uboot_safety_system import UBootEnvironmentAnalyzer, KernelEntryPointProtector
from core.pattern_engine import EnhancedPatternMatcher

def validate_firmware_safety(firmware_path: str, old_pattern: str, new_pattern: str) -> dict:
    """
    ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏Ñ‡∏ß‡∏≤‡∏°‡∏õ‡∏•‡∏≠‡∏î‡∏†‡∏±‡∏¢‡πÅ‡∏ö‡∏ö‡∏Ñ‡∏£‡∏≠‡∏ö‡∏Ñ‡∏•‡∏∏‡∏°‡∏Å‡πà‡∏≠‡∏ô‡∏Å‡∏≤‡∏£‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç firmware
    
    Returns:
        dict: ‡∏ú‡∏•‡∏Å‡∏≤‡∏£‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡πÅ‡∏•‡∏∞‡∏Ñ‡∏≥‡πÅ‡∏ô‡∏∞‡∏ô‡∏≥
    """
    print("üõ°Ô∏è ‡∏Å‡∏≥‡∏•‡∏±‡∏á‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏Ñ‡∏ß‡∏≤‡∏°‡∏õ‡∏•‡∏≠‡∏î‡∏†‡∏±‡∏¢ Advanced Firmware Safety...")
    
    results = {
        'safe_to_proceed': False,
        'risk_level': 'unknown',
        'warnings': [],
        'critical_issues': [],
        'recommendations': [],
        'uboot_analysis': None,
        'kernel_analysis': None,
        'pattern_analysis': None
    }
    
    try:
        # ‡∏≠‡πà‡∏≤‡∏ô‡πÑ‡∏ü‡∏•‡πå firmware
        with open(firmware_path, 'rb') as f:
            firmware_content = f.read()
        
        # 1. ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö U-Boot Environment
        print("üîç ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö U-Boot Environment...")
        uboot_analyzer = UBootEnvironmentAnalyzer()
        uboot_envs = uboot_analyzer.scan_uboot_env(firmware_path)
        
        if uboot_envs:
            print(f"‚úÖ ‡∏û‡∏ö U-Boot Environment: {len(uboot_envs)} blocks")
            best_env = uboot_envs[0]  # score ‡∏™‡∏π‡∏á‡∏™‡∏∏‡∏î
            
            safety_analysis = uboot_analyzer.analyze_boot_safety(best_env)
            results['uboot_analysis'] = safety_analysis
            
            if not safety_analysis['safe_to_edit']:
                results['critical_issues'].append("üö® U-Boot Environment ‡∏°‡∏µ‡∏Ñ‡∏ß‡∏≤‡∏°‡πÄ‡∏™‡∏µ‡πà‡∏¢‡∏á‡∏™‡∏π‡∏á!")
                results['critical_issues'].extend(safety_analysis['critical_risks'])
                results['risk_level'] = 'critical'
            
            if safety_analysis['warnings']:
                results['warnings'].extend(safety_analysis['warnings'])
        else:
            print("‚ö†Ô∏è ‡πÑ‡∏°‡πà‡∏û‡∏ö U-Boot Environment (‡∏≠‡∏≤‡∏à‡πÄ‡∏õ‡πá‡∏ô firmware ‡πÅ‡∏ö‡∏ö‡∏≠‡∏∑‡πà‡∏ô)")
        
        # 2. ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö Kernel Entry Points
        print("üéØ ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö Kernel Entry Points...")
        kernel_protector = KernelEntryPointProtector()
        
        try:
            old_bytes = bytes.fromhex(old_pattern) if old_pattern else b''
        except:
            old_bytes = old_pattern.encode('utf-8', errors='ignore')
        
        kernel_check = kernel_protector.check_kernel_areas(firmware_content, old_bytes)
        results['kernel_analysis'] = kernel_check
        
        if kernel_check['risk_level'] == 'critical':
            results['critical_issues'].append("üö® ‡∏Å‡∏≤‡∏£‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç‡πÉ‡∏Å‡∏•‡πâ Kernel Entry Points!")
            results['critical_issues'].extend(kernel_check['warnings'])
            results['risk_level'] = 'critical'
        elif kernel_check['risk_level'] == 'high':
            results['warnings'].extend(kernel_check['warnings'])
            if results['risk_level'] != 'critical':
                results['risk_level'] = 'high'
        
        # 3. ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏î‡πâ‡∏ß‡∏¢ Pattern Engine ‡πÄ‡∏î‡∏¥‡∏°
        print("üîß ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏î‡πâ‡∏ß‡∏¢ Enhanced Pattern Matcher...")
        pattern_matcher = EnhancedPatternMatcher()
        critical_check = pattern_matcher.check_critical_areas(firmware_content, old_bytes)
        results['pattern_analysis'] = critical_check
        
        if critical_check['risk_level'] == 'critical':
            results['critical_issues'].extend(critical_check['warnings'])
            results['risk_level'] = 'critical'
        elif critical_check['risk_level'] == 'high':
            results['warnings'].extend(critical_check['warnings'])
            if results['risk_level'] not in ['critical']:
                results['risk_level'] = 'high'
        
        # 4. ‡∏õ‡∏£‡∏∞‡πÄ‡∏°‡∏¥‡∏ô‡∏Ñ‡∏ß‡∏≤‡∏°‡∏õ‡∏•‡∏≠‡∏î‡∏†‡∏±‡∏¢‡∏£‡∏ß‡∏°
        if results['risk_level'] == 'unknown':
            results['risk_level'] = 'low'
        
        if results['risk_level'] in ['low', 'medium']:
            results['safe_to_proceed'] = True
            results['recommendations'].append("‚úÖ ‡∏î‡∏≥‡πÄ‡∏ô‡∏¥‡∏ô‡∏Å‡∏≤‡∏£‡πÑ‡∏î‡πâ ‡πÅ‡∏ï‡πà‡∏Ñ‡∏ß‡∏£‡∏™‡∏≥‡∏£‡∏≠‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏Å‡πà‡∏≠‡∏ô")
        elif results['risk_level'] == 'high':
            results['safe_to_proceed'] = False
            results['recommendations'].extend([
                "‚ö†Ô∏è ‡∏Ñ‡∏ß‡∏≤‡∏°‡πÄ‡∏™‡∏µ‡πà‡∏¢‡∏á‡∏™‡∏π‡∏á - ‡∏Ñ‡∏ß‡∏£‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡πÄ‡∏û‡∏¥‡πà‡∏°‡πÄ‡∏ï‡∏¥‡∏°",
                "üíæ ‡∏™‡∏≥‡∏£‡∏≠‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏´‡∏•‡∏≤‡∏¢‡∏ä‡∏∏‡∏î",
                "üîç ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö pattern ‡πÉ‡∏´‡πâ‡πÅ‡∏ô‡πà‡πÉ‡∏à"
            ])
        else:  # critical
            results['safe_to_proceed'] = False
            results['recommendations'].extend([
                "üõë ‡∏´‡πâ‡∏≤‡∏°‡∏î‡∏≥‡πÄ‡∏ô‡∏¥‡∏ô‡∏Å‡∏≤‡∏£! ‡∏Ñ‡∏ß‡∏≤‡∏°‡πÄ‡∏™‡∏µ‡πà‡∏¢‡∏á‡∏™‡∏π‡∏á‡∏°‡∏≤‡∏Å",
                "üîß ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö pattern ‡πÉ‡∏´‡πâ‡∏ñ‡∏π‡∏Å‡∏ï‡πâ‡∏≠‡∏á",
                "üìû ‡∏õ‡∏£‡∏∂‡∏Å‡∏©‡∏≤‡∏ú‡∏π‡πâ‡πÄ‡∏ä‡∏µ‡πà‡∏¢‡∏ß‡∏ä‡∏≤‡∏ç",
                "üè• ‡πÄ‡∏ï‡∏£‡∏µ‡∏¢‡∏° recovery method"
            ])
        
        print(f"üìä ‡∏ú‡∏•‡∏Å‡∏≤‡∏£‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö: {results['risk_level'].upper()}")
        return results
        
    except Exception as e:
        results['critical_issues'].append(f"‚ùå ‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö: {e}")
        results['risk_level'] = 'unknown'
        return results

def main():
    """‡∏ó‡∏î‡∏™‡∏≠‡∏ö‡∏£‡∏∞‡∏ö‡∏ö"""
    import argparse
    
    parser = argparse.ArgumentParser(description='Advanced Firmware Safety Validator')
    parser.add_argument('firmware', help='Firmware file path')
    parser.add_argument('--old-pattern', help='Old pattern to replace')
    parser.add_argument('--new-pattern', help='New pattern')
    
    args = parser.parse_args()
    
    if not os.path.exists(args.firmware):
        print(f"‚ùå ‡πÑ‡∏°‡πà‡∏û‡∏ö‡πÑ‡∏ü‡∏•‡πå: {args.firmware}")
        return
    
    results = validate_firmware_safety(args.firmware, args.old_pattern or '', args.new_pattern or '')
    
    print("\n" + "="*60)
    print("üìã FIRMWARE SAFETY VALIDATION REPORT")
    print("="*60)
    
    print(f"üéØ ‡∏£‡∏∞‡∏î‡∏±‡∏ö‡∏Ñ‡∏ß‡∏≤‡∏°‡πÄ‡∏™‡∏µ‡πà‡∏¢‡∏á: {results['risk_level'].upper()}")
    print(f"‚úÖ ‡∏õ‡∏•‡∏≠‡∏î‡∏†‡∏±‡∏¢‡∏ó‡∏µ‡πà‡∏à‡∏∞‡∏î‡∏≥‡πÄ‡∏ô‡∏¥‡∏ô‡∏Å‡∏≤‡∏£: {'YES' if results['safe_to_proceed'] else 'NO'}")
    
    if results['critical_issues']:
        print(f"\nüö® ‡∏õ‡∏±‡∏ç‡∏´‡∏≤‡∏ß‡∏¥‡∏Å‡∏§‡∏ï ({len(results['critical_issues'])}):")
        for issue in results['critical_issues']:
            print(f"  ‚Ä¢ {issue}")
    
    if results['warnings']:
        print(f"\n‚ö†Ô∏è ‡∏Ñ‡∏≥‡πÄ‡∏ï‡∏∑‡∏≠‡∏ô ({len(results['warnings'])}):")
        for warning in results['warnings']:
            print(f"  ‚Ä¢ {warning}")
    
    if results['recommendations']:
        print(f"\nüí° ‡∏Ñ‡∏≥‡πÅ‡∏ô‡∏∞‡∏ô‡∏≥ ({len(results['recommendations'])}):")
        for rec in results['recommendations']:
            print(f"  ‚Ä¢ {rec}")
    
    print("\n" + "="*60)

if __name__ == "__main__":
    main()
